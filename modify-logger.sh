#!/bin/bash
file="/var/www/UrlCampaignTracker/server/url-budget-logger.ts"

# Add console.log statements at strategic points
sed -i '/getAllUrlBudgetLogs/,/^  }/ s/async getAllUrlBudgetLogs/async getAllUrlBudgetLogs() {\n    console.log("DEBUG: getAllUrlBudgetLogs called");\n    try {\n      const campaigns = await db.query.campaigns.findMany();\n      console.log(`DEBUG: Found ${campaigns.length} campaigns`);\n      \n      let allLogs = [];\n      for (const campaign of campaigns) {\n        console.log(`DEBUG: Processing campaign ${campaign.id}`);\n        const logs = await this.getCampaignUrlBudgetLogs(campaign.id);\n        console.log(`DEBUG: Found ${logs.length} logs for campaign ${campaign.id}`);\n        allLogs = [...allLogs, ...logs];\n      }\n      \n      console.log(`DEBUG: Total logs found: ${allLogs.length}`);\n      return allLogs;\n    } catch (error) {\n      console.error(`DEBUG ERROR: ${error}`);\n      return [];\n    }\n  }\n\n  private _getAllUrlBudgetLogs/' "$file"

# Add debug logs to getCampaignUrlBudgetLogs
sed -i '/getCampaignUrlBudgetLogs/,/^  }/ s/async getCampaignUrlBudgetLogs/async getCampaignUrlBudgetLogs(campaignId: number): Promise<Array<{urlId: number, campaignId: number, urlName: string, price: string, dateTime: string}>> {\n    console.log(`DEBUG: getCampaignUrlBudgetLogs called for campaign ${campaignId}`);\n    try {\n      const logPath = this.getLogFilePath(campaignId);\n      console.log(`DEBUG: Log path: ${logPath}`);\n      \n      if (!fs.existsSync(logPath)) {\n        console.log(`DEBUG: Log file does not exist: ${logPath}`);\n        return [];\n      }\n      \n      console.log(`DEBUG: Log file exists: ${logPath}`);\n      const fileContent = fs.readFileSync(logPath, "utf8");\n      console.log(`DEBUG: File content length: ${fileContent.length}`);\n      \n      if (!fileContent.trim()) {\n        console.log(`DEBUG: File is empty: ${logPath}`);\n        return [];\n      }\n      \n      const lines = fileContent.trim().split("\\n");\n      console.log(`DEBUG: Lines count: ${lines.length}`);\n      \n      const logs = lines.map(line => {\n        const [urlId, campId, urlName, price, dateTime] = line.split("|");\n        return {\n          urlId: parseInt(urlId),\n          campaignId: parseInt(campId),\n          urlName,\n          price,\n          dateTime\n        };\n      });\n      \n      console.log(`DEBUG: Parsed ${logs.length} logs`);\n      return logs;\n    } catch (error) {\n      console.error(`DEBUG ERROR in getCampaignUrlBudgetLogs: ${error}`);\n      return [];\n    }\n  }\n\n  private _getCampaignUrlBudgetLogs/' "$file"

# Add debug logs to getLogFilePath
sed -i '/getLogFilePath/,/^  }/ s/private getLogFilePath/private getLogFilePath(campaignId: number): string {\n    const logPath = path.join(this.logDirectory, `campaign_${campaignId}_url_budget_logs`);\n    console.log(`DEBUG: getLogFilePath: ${logPath}`);\n    return logPath;\n  }\n\n  private _getLogFilePath/' "$file"

echo "Debug logs added to URL budget logger"
