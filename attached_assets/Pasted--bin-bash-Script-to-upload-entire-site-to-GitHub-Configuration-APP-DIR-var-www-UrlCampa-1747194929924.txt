#!/bin/bash
# Script to upload entire site to GitHub

# Configuration
APP_DIR="/var/www/UrlCampaignTracker"
GITHUB_REPO="https://github.com/YOUR_USERNAME/YOUR_REPO.git"
GITHUB_TOKEN="YOUR_GITHUB_TOKEN"  # Replace with your GitHub token
BACKUP_DIR="/tmp/site_backup_$(date +%s)"

# Step 1: Create a backup of the current site
echo "Creating backup of the current site..."
vctrack create "Before GitHub upload"

# Step 2: Create a temporary directory for GitHub preparation
mkdir -p "$BACKUP_DIR"

# Step 3: Copy ALL files to the temporary directory
echo "Copying files to temporary directory..."
cp -R "$APP_DIR/"* "$BACKUP_DIR/"
cp -R "$APP_DIR/".[^.]* "$BACKUP_DIR/" 2>/dev/null || true  # Copy hidden files too

# Step 4: Move to backup directory
cd "$BACKUP_DIR"

# Step 5: Create a comprehensive .gitignore file
cat > .gitignore << 'EOF'
# Environment variables
.env
*.env

# Runtime data
node_modules/
dist/
build/

# Logs
*.log
npm-debug.log*

# Temporary files
tmp/
.DS_Store
.idea/
.vscode/

# Never include database dumps
*.sql
*.dump

# User uploads or runtime files that shouldn't be in git
url_budget_logs/*.log
Active_Url_Budget_Logs/*.log

# Secrets - but create empty placeholder files 
*credentials*.json
*token*.json
*secret*.json
EOF

# Step 6: Create placeholders for sensitive files
# This ensures the directory structure is preserved
find . -type f -name "*credentials*.json" -o -name "*token*.json" -o -name "*secret*.json" | while read file; do
  echo '{"placeholder": "Replace with actual credentials"}' > "$file.placeholder"
  echo "Created placeholder for $file"
  rm "$file" # Remove the original sensitive file
done

# Step 7: Initialize Git repository
echo "Initializing Git repository..."
git init

# Step 8: Add all files
git add .

# Step 9: Initial commit
git commit -m "Complete site upload from VPS"

# Step 10: Add remote with token for authentication
git remote add origin "https://$GITHUB_TOKEN@github.com/YOUR_USERNAME/YOUR_REPO.git"

# Step 11: Push to GitHub
echo "Pushing to GitHub..."
git push -u origin main --force

echo "Site has been uploaded to GitHub successfully!"
echo "GitHub repository: $GITHUB_REPO"

# Step 12: Create the sync script for future updates
cat > "$APP_DIR/github-sync.sh" << 'EOF'
#!/bin/bash

# Script to sync from GitHub to VPS
# Run this after pushing changes to GitHub from Replit

APP_DIR="/var/www/UrlCampaignTracker"
GITHUB_REPO="https://github.com/YOUR_USERNAME/YOUR_REPO.git"
GITHUB_TOKEN="YOUR_GITHUB_TOKEN"

# Create a backup before pulling changes
vctrack create "Before GitHub sync $(date)"

# Go to application directory
cd "$APP_DIR"

# Pull latest changes
git pull

# Install any new dependencies
npm install --production

# Restart the application
pm2 restart url-tracker

echo "VPS has been updated from GitHub successfully!"
EOF

chmod +x "$APP_DIR/github-sync.sh"

echo "Created github-sync.sh script in $APP_DIR for future updates"
echo "Done!"